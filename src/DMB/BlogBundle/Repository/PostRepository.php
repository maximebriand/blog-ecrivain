<?php

namespace DMB\BlogBundle\Repository;

/**
 * postRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository
{

    public function findAllPostsOrderByChapter()
    {
        return $this->findBy(array(), array('chapterNumber' => 'ASC'));
    }
    public function findAllActivePostsOrderByChapter()
    {
        return $this->createQueryBuilder('post')
            ->where("post.activated = true")
            ->orderBy("post.chapterNumber")
            ->andWhere("post.publishedDate < CURRENT_TIMESTAMP()")
            ->getQuery()
            ->getResult();
    }

    //find next and previous for Admin
    public function findByIdChapterNumber($chapterNumber)
    {
        return $this->createQueryBuilder('post')
            ->where("post.chapterNumber = $chapterNumber")
            ->getQuery()
            ->getOneOrNullResult(); //use to fetch the object
    }

    //find next and previous for user
    public function findByIdChapterNumberUser($chapterNumber)
    {
        return $this->createQueryBuilder('post')
            ->where("post.chapterNumber = $chapterNumber")
            ->andWhere("post.activated = true")
            ->getQuery()
            ->getOneOrNullResult(); //use to fetch the object
    }

    //find next and previous for anon
    public function findByIdChapterNumberAnon($chapterNumber)
    {
        return $this->createQueryBuilder('post')
            ->where("post.chapterNumber = $chapterNumber")
            ->andWhere("post.activated = true")
            ->andWhere("post.premium = false")
            ->getQuery()
            ->getOneOrNullResult(); //use to fetch the object
    }

    public function findChapterToNotify()
    {
        return $this->createQueryBuilder('post')
            ->where("post.activated = true")
            ->andWhere("post.notified = false")
            ->andWhere("post.publishedDate < CURRENT_TIMESTAMP()")
            ->getQuery()
            ->getResult();
    }


}
